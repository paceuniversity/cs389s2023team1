<resources>
    <string name="app_name">Building blocks team 1</string>
    <string name="action_settings">Settings</string>
    <string name="title">buildingBlocks</string>
    <!-- Strings used for fragments for navigation -->
    <string name="first_fragment_label">First Fragment</string>
    <string name="second_fragment_label">Second Fragment</string>
    <string name="next">Next</string>
    <string name="previous">Previous</string>
    <string name="home_button_to_signup_text">Sign Up</string>

    <string name="logo">Logo</string>
    <string name="home_daily">Daily Quiz</string>
    <string name="home_lessons">Lessons</string>
    <string name="home_flashcards">Flash Cards</string>

    <!--Strings for login Page  -->
    <string name="login_button_text">Login</string>
    <string name="login_password_text">Password</string>
    <string name="login_password_hint">Enter Password</string>
    <string name="login_username_text">Username</string>
    <string name="login_username_hint">Enter Username</string>
    <string name="login_title">Hello Again!</string>
    <string name="login_forgot_password">Forgot password?</string>
    <string name="login_clicked_wrong_page_text">If you do not have an account:</string>
    <string name="login_to_signup_text"><u>Sign up</u></string>

    <string name="hello_first_fragment">buildingBlocks</string>
    <string name="hello_second_fragment">Hello second fragment. Arg: %1$s</string>
    <!-- Strings related to login -->
    <string name="prompt_email">Email</string>
    <string name="prompt_password">Password</string>
    <string name="action_sign_in">Sign in or register</string>
    <string name="action_sign_in_short">Sign in</string>
    <string name="welcome">"Welcome!"</string>
    <string name="invalid_username">Not a valid username</string>
    <string name="invalid_password">Password must be greater than 5 characters</string>
    <string name="login_failed">"Login failed"</string>

    <!-- Strings about signup -->
    <string name="signup_title">Hello!</string>
    <string name="signup_confirm_email">Confirm Email</string>
    <string name="signup_username">Username</string>
    <string name="signup_confirm_password">Confirm Password</string>
    <string name="signup_button_text">Sign Up!</string>
    <string name="signup_clicked_wrong_page_test">If you already have an account:</string>
    <string name="signup_to_login_text"><u>Login!</u></string>
    <string name="signed_out">Signed out</string>
    <string name="verify_email">Verify Email</string>
    <string name="sign_out">Sign Out</string>

    <string name="reload">Reload</string>

    <!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment</string>
    <string name="sign_out_text">Sign out</string>

    <!-- Quiz Stuff -->
    <string name="quiz_title">Quizzes Menu</string>
    <string name="quiz_text">I need a lot of text dawg if I want to reach the end of the page to see if I can scroll view it. I need to make sure that there is enough text</string>
    <string name="quiz_linked_list">LinkedList Quiz</string>
    <string name="quiz_array_list">ArrayList Quiz</string>
    <string name="quiz_placeholder1">Placeholder</string>
    <string name="quiz_placeholder2">Placeholder2</string>
    <string name="bubble_sort">Start with an array of unsorted numbers
Define a function called “bubbleSort” that takes in the array and the length of the array as parameters
In the function, create a variable called “sorted” that is set to true
Create a for loop that iterates through the array starting at index 0 and ending at the length of the array -1
Within the for loop, compare the current element with the next element in the array
If the current element is greater than the next element, swap their positions and set “sorted” to false
After the for loop, check if “sorted” is false
If “sorted” is false, call the “bubbleSort” function again with the same array and length as parameters
If “sorted” is true, the array is now sorted and the function will return the sorted array
Call the “bubbleSort” function with the initial unsorted array and its length as parameters to begin the sorting process.</string>
    <string name="linked_list_lec">Random access is not allowed. We have to access elements sequentially starting from the first node(head node). So we cannot do a binary search with linked lists efficiently with its default implementation.
Extra memory space for a pointer is required with each element of the list.
Not cache-friendly. Since array elements are contiguous locations, there is the locality of reference which is not there in the case of linked lists.
It takes a lot of time in traversing and changing the pointers.
Reverse traversing is not possible in singly linked lists.
It will be confusing when we work with pointers.
Direct access to an element is not possible in a linked list as in an array by index.
Searching for an element is costly and requires O(n) time complexity.
Sorting of linked lists is very complex and costly.
Appending an element to a linked list is a costly operation, and takes O(n) time, where n is the number of elements in the linked list, as compared to arrays that take O(1) time.</string>


</resources>