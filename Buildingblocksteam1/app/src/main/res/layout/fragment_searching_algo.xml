<?xml version="1.0" encoding="utf-8"?>
<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".SearchingAlgoFragment">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:background="@color/black">

        <com.pierfrancescosoffritti.androidyoutubeplayer.core.player.views.YouTubePlayerView
            android:id="@+id/youtube_player_view"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="50dp"
            android:layout_marginBottom="20dp"
            app:autoPlay="true"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintHorizontal_bias="0.0"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="parent"
            app:videoId="qBGLYzFF1aQ" />

        <ImageView
            android:id="@+id/back_arrow"
            android:layout_width="60dp"
            android:layout_height="40dp"
            android:clickable="true"
            android:onClick="onClick"
            android:src="@drawable/bg_removed_arrow"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="parent"
            android:focusable="true" />

        <TextView
            android:id="@+id/textView6"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Searching Algorithms"
            android:textColor="@color/figma_orange"
            android:textSize="20dp"
            android:layout_marginTop="10dp"
            android:layout_marginBottom="10dp"
            app:layout_constraintBottom_toTopOf="@+id/youtube_player_view"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintHorizontal_bias="0.498"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintVertical_bias="0.686" />

        <TextView
            android:id="@+id/textView2"
            android:layout_width="408dp"
            android:layout_height="428dp"
            android:text="Linear Search:
Pros: Simple and easy to implement. Works well for small data sets and unsorted arrays.
Cons: Inefficient for large data sets. Time complexity is O(n), where n is the size of the array.
Binary Search:
Pros: Efficient for sorted arrays. Time complexity is O(log n), where n is the size of the array.
Cons: Requires a sorted array as input. Additional memory overhead may be required for recursive implementation.
Hashing:
Pros: Provides constant-time average case lookup for a given key. Efficient for large data sets.
Cons: Requires a good hash function to minimize collisions. May consume significant memory, especially if the hash table needs to be dynamically resized.
Depth-First Search (DFS):
Pros: Simple to implement. Can find a solution in a large search space. Can be used to traverse graphs and trees.
Cons: May get stuck in infinite loops if not implemented correctly. Does not guarantee the shortest path.
Breadth-First Search (BFS):
Pros: Guarantees the shortest path in terms of the number of edges. Can be used to traverse graphs and trees.
Cons: Requires more memory than DFS, especially for large search spaces. Not suitable for searching in unweighted graphs.
A* Search:
Pros: Provides an optimal solution by using heuristics to guide the search. Efficient and effective for finding the shortest path.
Cons: Requires a good heuristic function. The time complexity depends on the quality of the heuristic function."
            android:textColor="@color/figma_lime_green"
            android:textAlignment="center"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@+id/youtube_player_view" />

    </androidx.constraintlayout.widget.ConstraintLayout>


</FrameLayout>